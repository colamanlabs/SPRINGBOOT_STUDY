


spring.datasource.hikari.jdbc-url=jdbc:mariadb://127.0.0.1:13306/study
spring.datasource.hikari.username=studyuser
spring.datasource.hikari.password=studyuser
spring.datasource.hikari.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.pool-name=HikariCP TEST POOL


### https://docs.spring.io/spring-boot/docs/2.1.x/reference/html/howto-database-initialization.html
### 86.4 Initialize a Spring Batch Database
### If you use Spring Batch, it comes pre-packaged with SQL initialization scripts for most popular database platforms. Spring Boot can detect your database type and execute those scripts on startup. If you use an embedded database, this happens by default. You can also enable it for any database type, as shown in the following example:
### 
### spring.batch.initialize-schema=always
### You can also switch off the initialization explicitly by setting spring.batch.initialize-schema=never.

### spring.batch.initialize-schema=always ì§ì íëë°, ìë§ë¤ì´ì§ë¤. ì¬ì©íì§ ë§ì.
###
### spring.batch.jdbc.initialize-schema=always ë¡ íë©´ ì¤í¤ë§ê° ìëì¼ë¡ ë§ë¤ì´ì§ë¤.
###
spring.batch.jdbc.initialize-schema=always



### 지정 Job 만 실행하도록 설정함
spring.batch.job.names=${job.name:NONE}

### 실행방법
### 먼저, "spring.batch.job.names=${job.name:NONE}" 를   
### application.properties (or application.yml) 에 추가한다.
###
### 1안)
### 실행할 때 STS 에 프로그램 아규먼트를 직접 지정
### "--job.name=conditionalJob1 -retry=1"

### 2안) (결국 같은 것이다.)
### 실행할 때 STS 에 "${string_prompt}" 로 지정하고 
### 실제 실행할 다이얼로그 창에 "--job.name=conditionalJob1 -retry=1" 를 넣는다.
### spring.batch.job.names=${job.name:NONE}

### 2안을 더 선호한다.
### 스프링배치는 같은 파라미터인 경우 재실행이 불가하므로, retry 역할을 하는 값을 추가하는데,
### 런 컨피그레이션 프로그램 아규먼트를 매번 수정하는 것이 번거롭기 때문이다.
### --job.name=conditionalJob1 -retry=1
